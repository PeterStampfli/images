/* jshint esversion: 6 */

import {
    Polygon
}
from "./polygon.js";

export const mod4 = {};

mod4.setup = function() {

    // for decomposition of quadrangles
    // exchange (anchor) corner 0 with corner 2 (at same diagonal)
    // if option activated
    Polygon.prototype.shiftMod4 = function() {
        if (Polygon.shift) {
            let h = this.cornersX[0];
            this.cornersX[0] = this.cornersX[2];
            this.cornersX[2] = h;
            h = this.cornersY[0];
            this.cornersY[0] = this.cornersY[2];
            this.cornersY[2] = h;
        }
    };

    // triangles to quadrangles
    //=======================================================

    Polygon.prototype.triangleTo2Quads = function() {
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[0] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[0] + this.cornersY[2]);
        let midX12 = 0.5 * (this.cornersX[2] + this.cornersX[1]);
        let midY12 = 0.5 * (this.cornersY[2] + this.cornersY[1]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(midX1, midY1);
        p1.addCorner(this.cornersX[1], this.cornersY[1]);
        p1.addCorner(midX12, midY12);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(midX12, midY12);
        p2.addCorner(this.cornersX[2], this.cornersY[2]);
        p2.addCorner(midX2, midY2);
        p2.addCorner(this.cornersX[0], this.cornersY[0]);
        p2.subdivide();
    };

    Polygon.prototype.triangleTo3Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[0] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[0] + this.cornersY[2]);
        let midX12 = 0.5 * (this.cornersX[2] + this.cornersX[1]);
        let midY12 = 0.5 * (this.cornersY[2] + this.cornersY[1]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX2, midY2);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(midX1, midY1);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.addCorner(midX12, midY12);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX12, midY12);
        p3.addCorner(this.cornersX[2], this.cornersY[2]);
        p3.addCorner(midX2, midY2);
        p3.subdivide();
    };

    Polygon.prototype.triangleTo4Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[0] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[0] + this.cornersY[2]);
        let midX12 = 0.5 * (this.cornersX[2] + this.cornersX[1]);
        let midY12 = 0.5 * (this.cornersY[2] + this.cornersY[1]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX2, midY2);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(midX1, midY1);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.addCorner(0.5 * (midX12 + this.cornersX[1]), 0.5 * (midY12 + this.cornersY[1]));
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(0.5 * (midX12 + this.cornersX[1]), 0.5 * (midY12 + this.cornersY[1]));
        p3.addCorner(midX12, midY12);
        p3.addCorner(0.5 * (midX12 + this.cornersX[2]), 0.5 * (midY12 + this.cornersY[2]));
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(0.5 * (midX12 + this.cornersX[2]), 0.5 * (midY12 + this.cornersY[2]));
        p4.addCorner(this.cornersX[2], this.cornersY[2]);
        p4.addCorner(midX2, midY2);
        p4.subdivide();
    };

    Polygon.prototype.triangleTo5Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[0] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[0] + this.cornersY[2]);
        let midX12 = 0.5 * (this.cornersX[2] + this.cornersX[1]);
        let midY12 = 0.5 * (this.cornersY[2] + this.cornersY[1]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX2, midY2);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(midX1, midY1);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.addCorner(0.5 * (this.cornersX[1] + midX1), 0.5 * (this.cornersY[1] + midY1));
        p2.addCorner(midX1, midY1);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(this.cornersX[1], this.cornersY[1]);
        p3.addCorner(0.5 * (this.cornersX[1] + midX12), 0.5 * (this.cornersY[1] + midY12));
        p3.addCorner(midX12, midY12);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(this.cornersX[2], this.cornersY[2]);
        p4.addCorner(0.5 * (this.cornersX[2] + midX12), 0.5 * (this.cornersY[2] + midY12));
        p4.addCorner(midX12, midY12);
        p4.subdivide();
        const p5 = new Polygon(this.generation + 1);
        p5.addCorner(centerX, centerY);
        p5.addCorner(this.cornersX[2], this.cornersY[2]);
        p5.addCorner(0.5 * (this.cornersX[2] + midX2), 0.5 * (this.cornersY[2] + midY2));
        p5.addCorner(midX2, midY2);
        p5.subdivide();
    };

    Polygon.prototype.triangleTo6Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[0] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[0] + this.cornersY[2]);
        let midX12 = 0.5 * (this.cornersX[2] + this.cornersX[1]);
        let midY12 = 0.5 * (this.cornersY[2] + this.cornersY[1]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(0.5 * (this.cornersX[0] + midX1), 0.5 * (this.cornersY[0] + midY1));
        p1.addCorner(midX1, midY1);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.addCorner(0.5 * (this.cornersX[1] + midX1), 0.5 * (this.cornersY[1] + midY1));
        p2.addCorner(midX1, midY1);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(this.cornersX[1], this.cornersY[1]);
        p3.addCorner(0.5 * (this.cornersX[1] + midX12), 0.5 * (this.cornersY[1] + midY12));
        p3.addCorner(midX12, midY12);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(this.cornersX[2], this.cornersY[2]);
        p4.addCorner(0.5 * (this.cornersX[2] + midX12), 0.5 * (this.cornersY[2] + midY12));
        p4.addCorner(midX12, midY12);
        p4.subdivide();
        const p5 = new Polygon(this.generation + 1);
        p5.addCorner(centerX, centerY);
        p5.addCorner(this.cornersX[2], this.cornersY[2]);
        p5.addCorner(0.5 * (this.cornersX[2] + midX2), 0.5 * (this.cornersY[2] + midY2));
        p5.addCorner(midX2, midY2);
        p5.subdivide();
        const p6 = new Polygon(this.generation + 1);
        p6.addCorner(centerX, centerY);
        p6.addCorner(this.cornersX[0], this.cornersY[0]);
        p6.addCorner(0.5 * (this.cornersX[0] + midX2), 0.5 * (this.cornersY[0] + midY2));
        p6.addCorner(midX2, midY2);
        p6.subdivide();
    };

    // subdivision of quadrangles to quadrangles
    //====================================================

    Polygon.prototype.quadTo2Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(this.cornersX[1], this.cornersY[1]);
        p1.addCorner(this.cornersX[2], this.cornersY[2]);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(this.cornersX[2], this.cornersY[2]);
        p2.addCorner(this.cornersX[3], this.cornersY[3]);
        p2.addCorner(this.cornersX[0], this.cornersY[0]);
        p2.subdivide();
    };

    Polygon.prototype.quadTo3Quads = function() {
        this.shiftMod4();
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX2 = 0.5 * (this.cornersX[1] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[1] + this.cornersY[2]);
        let midX3 = 0.5 * (this.cornersX[2] + this.cornersX[3]);
        let midY3 = 0.5 * (this.cornersY[2] + this.cornersY[3]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(this.cornersX[1], this.cornersY[1]);
        p1.addCorner(midX2, midY2);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX2, midY2);
        p2.addCorner(this.cornersX[2], this.cornersY[2]);
        p2.addCorner(midX3, midY3);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX3, midY3);
        p3.addCorner(this.cornersX[3], this.cornersY[3]);
        p3.addCorner(this.cornersX[0], this.cornersY[0]);
        p3.subdivide();
    };

    Polygon.prototype.quadTo4Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[1] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[1] + this.cornersY[2]);
        let midX3 = 0.5 * (this.cornersX[2] + this.cornersX[3]);
        let midY3 = 0.5 * (this.cornersY[2] + this.cornersY[3]);
        let midX4 = 0.5 * (this.cornersX[3] + this.cornersX[0]);
        let midY4 = 0.5 * (this.cornersY[3] + this.cornersY[0]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX1, midY1);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(midX4, midY4);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.addCorner(midX2, midY2);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX2, midY2);
        p3.addCorner(this.cornersX[2], this.cornersY[2]);
        p3.addCorner(midX3, midY3);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(midX3, midY3);
        p4.addCorner(this.cornersX[3], this.cornersY[3]);
        p4.addCorner(midX4, midY4);
        p4.subdivide();
    };

    Polygon.prototype.quadTo5Quads = function() {
        this.shiftMod4();
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[1] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[1] + this.cornersY[2]);
        let midX3 = 0.5 * (this.cornersX[2] + this.cornersX[3]);
        let midY3 = 0.5 * (this.cornersY[2] + this.cornersY[3]);
        let midX4 = 0.5 * (this.cornersX[3] + this.cornersX[0]);
        let midY4 = 0.5 * (this.cornersY[3] + this.cornersY[0]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX1, midY1);
        p1.addCorner(0.5 * (this.cornersX[0] + midX1), 0.5 * (this.cornersY[0] + midY1));
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.addCorner(midX2, midY2);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX2, midY2);
        p3.addCorner(this.cornersX[2], this.cornersY[2]);
        p3.addCorner(midX3, midY3);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(midX3, midY3);
        p4.addCorner(this.cornersX[3], this.cornersY[3]);
        p4.addCorner(midX4, midY4);
        p4.subdivide();
        const p5 = new Polygon(this.generation + 1);
        p5.addCorner(centerX, centerY);
        p5.addCorner(this.cornersX[0], this.cornersY[0]);
        p5.addCorner(0.5 * (this.cornersX[0] + midX4), 0.5 * (this.cornersY[0] + midY4));
        p5.addCorner(midX4, midY4);
        p5.subdivide();
    };

    Polygon.prototype.quadTo6Quads = function() {
        this.shiftMod4();
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[1] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[1] + this.cornersY[2]);
        let midX3 = 0.5 * (this.cornersX[2] + this.cornersX[3]);
        let midY3 = 0.5 * (this.cornersY[2] + this.cornersY[3]);
        let midX4 = 0.5 * (this.cornersX[3] + this.cornersX[0]);
        let midY4 = 0.5 * (this.cornersY[3] + this.cornersY[0]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX1, midY1);
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.addCorner(midX4, midY4);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(0.5 * (this.cornersX[1] + midX1), 0.5 * (this.cornersY[1] + midY1));
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX2, midY2);
        p3.addCorner(0.5 * (this.cornersX[1] + midX2), 0.5 * (this.cornersY[1] + midY2));
        p3.addCorner(this.cornersX[1], this.cornersY[1]);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(midX2, midY2);
        p4.addCorner(this.cornersX[2], this.cornersY[2]);
        p4.addCorner(midX3, midY3);
        p4.subdivide();
        const p5 = new Polygon(this.generation + 1);
        p5.addCorner(centerX, centerY);
        p5.addCorner(midX3, midY3);
        p5.addCorner(0.5 * (this.cornersX[3] + midX3), 0.5 * (this.cornersY[3] + midY3));
        p5.addCorner(this.cornersX[3], this.cornersY[3]);
        p5.subdivide();
        const p6 = new Polygon(this.generation + 1);
        p6.addCorner(centerX, centerY);
        p6.addCorner(midX4, midY4);
        p6.addCorner(0.5 * (this.cornersX[3] + midX4), 0.5 * (this.cornersY[3] + midY4));
        p6.addCorner(this.cornersX[3], this.cornersY[3]);
        p6.subdivide();
    };

    Polygon.prototype.quadTo7Quads = function() {
        this.shiftMod4();
        let length = this.cornersX.length;
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[1] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[1] + this.cornersY[2]);
        let midX3 = 0.5 * (this.cornersX[2] + this.cornersX[3]);
        let midY3 = 0.5 * (this.cornersY[2] + this.cornersY[3]);
        let midX4 = 0.5 * (this.cornersX[3] + this.cornersX[0]);
        let midY4 = 0.5 * (this.cornersY[3] + this.cornersY[0]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX1, midY1);
        p1.addCorner(0.5 * (this.cornersX[0] + midX1), 0.5 * (this.cornersY[0] + midY1));
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(0.5 * (this.cornersX[1] + midX1), 0.5 * (this.cornersY[1] + midY1));
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX2, midY2);
        p3.addCorner(0.5 * (this.cornersX[1] + midX2), 0.5 * (this.cornersY[1] + midY2));
        p3.addCorner(this.cornersX[1], this.cornersY[1]);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(midX2, midY2);
        p4.addCorner(this.cornersX[2], this.cornersY[2]);
        p4.addCorner(midX3, midY3);
        p4.subdivide();
        const p5 = new Polygon(this.generation + 1);
        p5.addCorner(centerX, centerY);
        p5.addCorner(midX3, midY3);
        p5.addCorner(0.5 * (this.cornersX[3] + midX3), 0.5 * (this.cornersY[3] + midY3));
        p5.addCorner(this.cornersX[3], this.cornersY[3]);
        p5.subdivide();
        const p6 = new Polygon(this.generation + 1);
        p6.addCorner(centerX, centerY);
        p6.addCorner(midX4, midY4);
        p6.addCorner(0.5 * (this.cornersX[3] + midX4), 0.5 * (this.cornersY[3] + midY4));
        p6.addCorner(this.cornersX[3], this.cornersY[3]);
        p6.subdivide();
        const p7 = new Polygon(this.generation + 1);
        p7.addCorner(centerX, centerY);
        p7.addCorner(this.cornersX[0], this.cornersY[0]);
        p7.addCorner(0.5 * (this.cornersX[0] + midX4), 0.5 * (this.cornersY[0] + midY4));
        p7.addCorner(midX4, midY4);
        p7.subdivide();
    };

    Polygon.prototype.quadTo8Quads = function() {
        var centerX, centerY;
        [centerX, centerY] = this.getCenter();
        let midX1 = 0.5 * (this.cornersX[0] + this.cornersX[1]);
        let midY1 = 0.5 * (this.cornersY[0] + this.cornersY[1]);
        let midX2 = 0.5 * (this.cornersX[1] + this.cornersX[2]);
        let midY2 = 0.5 * (this.cornersY[1] + this.cornersY[2]);
        let midX3 = 0.5 * (this.cornersX[2] + this.cornersX[3]);
        let midY3 = 0.5 * (this.cornersY[2] + this.cornersY[3]);
        let midX4 = 0.5 * (this.cornersX[3] + this.cornersX[0]);
        let midY4 = 0.5 * (this.cornersY[3] + this.cornersY[0]);
        const p1 = new Polygon(this.generation + 1);
        p1.addCorner(centerX, centerY);
        p1.addCorner(midX1, midY1);
        p1.addCorner(0.5 * (this.cornersX[0] + midX1), 0.5 * (this.cornersY[0] + midY1));
        p1.addCorner(this.cornersX[0], this.cornersY[0]);
        p1.subdivide();
        const p2 = new Polygon(this.generation + 1);
        p2.addCorner(centerX, centerY);
        p2.addCorner(midX1, midY1);
        p2.addCorner(0.5 * (this.cornersX[1] + midX1), 0.5 * (this.cornersY[1] + midY1));
        p2.addCorner(this.cornersX[1], this.cornersY[1]);
        p2.subdivide();
        const p3 = new Polygon(this.generation + 1);
        p3.addCorner(centerX, centerY);
        p3.addCorner(midX2, midY2);
        p3.addCorner(0.5 * (this.cornersX[1] + midX2), 0.5 * (this.cornersY[1] + midY2));
        p3.addCorner(this.cornersX[1], this.cornersY[1]);
        p3.subdivide();
        const p4 = new Polygon(this.generation + 1);
        p4.addCorner(centerX, centerY);
        p4.addCorner(midX2, midY2);
        p4.addCorner(0.5 * (this.cornersX[2] + midX2), 0.5 * (this.cornersY[2] + midY2));
        p4.addCorner(this.cornersX[2], this.cornersY[2]);
        p4.subdivide();
        const p4a = new Polygon(this.generation + 1);
        p4a.addCorner(centerX, centerY);
        p4a.addCorner(midX3, midY3);
        p4a.addCorner(0.5 * (this.cornersX[2] + midX3), 0.5 * (this.cornersY[2] + midY3));
        p4a.addCorner(this.cornersX[2], this.cornersY[2]);
        p4a.subdivide();
        const p5 = new Polygon(this.generation + 1);
        p5.addCorner(centerX, centerY);
        p5.addCorner(midX3, midY3);
        p5.addCorner(0.5 * (this.cornersX[3] + midX3), 0.5 * (this.cornersY[3] + midY3));
        p5.addCorner(this.cornersX[3], this.cornersY[3]);
        p5.subdivide();
        const p6 = new Polygon(this.generation + 1);
        p6.addCorner(centerX, centerY);
        p6.addCorner(midX4, midY4);
        p6.addCorner(0.5 * (this.cornersX[3] + midX4), 0.5 * (this.cornersY[3] + midY4));
        p6.addCorner(this.cornersX[3], this.cornersY[3]);
        p6.subdivide();
        const p7 = new Polygon(this.generation + 1);
        p7.addCorner(centerX, centerY);
        p7.addCorner(this.cornersX[0], this.cornersY[0]);
        p7.addCorner(0.5 * (this.cornersX[0] + midX4), 0.5 * (this.cornersY[0] + midY4));
        p7.addCorner(midX4, midY4);
        p7.subdivide();
    };
};